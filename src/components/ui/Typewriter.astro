---
export interface Props {
  texts: string[];
  typingSpeed?: number; 
  deletingSpeed?: number; 
  delayBetween?: number; 
  loop?: boolean; 
  class?: string;
}
const { texts, typingSpeed = 100, deletingSpeed = 50, delayBetween = 2000, loop = true, class: cls = 'typewriter' } = Astro.props;

// Generate unique ID for multiple instances
const uniqueId = `typewriter-${Math.random().toString(36).substr(2, 9)}`;
---
<span id={uniqueId} class={cls} data-texts={JSON.stringify(texts)} data-typing-speed={typingSpeed} data-deleting-speed={deletingSpeed} data-delay-between={delayBetween} data-loop={loop} aria-live="polite">
  <span class="typewriter-text"></span>
  <span class="typewriter-cursor">|</span>
</span>

<style>
  .typewriter {
    display: inline-block;
    position: relative;
  }

  .typewriter-text {
    color: white;
  }

  .typewriter-cursor {
    color: var(--color-primary);
    animation: blink 1.2s infinite;
    font-weight: bold;
    margin-left: 2px;
  }

  @keyframes blink {
    0%, 49% { opacity: 1; }
    50%, 100% { opacity: 0; }
  }
</style>

<script define:vars={{ uniqueId }}>
  document.addEventListener('DOMContentLoaded', function() {
    const el = document.getElementById(uniqueId);
    if (!el) {
      console.error('Typewriter element not found:', uniqueId);
      return;
    }
    
    const textElement = el.querySelector('.typewriter-text');
    if (!textElement) {
      console.error('Typewriter text element not found');
      return;
    }
    
    console.log('Typewriter element found:', el);
    
    const texts = JSON.parse(el.getAttribute('data-texts') || '[]');
    const typeSpeed = Number(el.getAttribute('data-typing-speed') || 100);
    const deleteSpeed = Number(el.getAttribute('data-deleting-speed') || 50);
    const delayBetween = Number(el.getAttribute('data-delay-between') || 2000);
    const loop = (el.getAttribute('data-loop') === 'true');
    
    console.log('Typewriter config:', { texts, typeSpeed, deleteSpeed, delayBetween, loop });
    
    if (texts.length === 0) {
      console.error('No texts provided for typewriter');
      return;
    }

    let currentTextIndex = 0;
    let currentCharIndex = 0;
    let isDeleting = false;
    let isInitialized = false;

    function type() {
      if (!textElement) return;
      
      const currentText = texts[currentTextIndex];
      
      if (isDeleting) {
        // Deleting
        textElement.textContent = currentText.substring(0, currentCharIndex - 1);
        currentCharIndex--;
        
        if (currentCharIndex === 0) {
          isDeleting = false;
          currentTextIndex = (currentTextIndex + 1) % texts.length;
          
          if (!loop && currentTextIndex === 0) {
            return; // Stop if not looping
          }
          
          setTimeout(type, 800); // Longer pause before typing next text
          return;
        }
        
        setTimeout(type, deleteSpeed);
      } else {
        // Typing
        textElement.textContent = currentText.substring(0, currentCharIndex + 1);
        currentCharIndex++;
        
        if (currentCharIndex === currentText.length) {
          isDeleting = true;
          setTimeout(type, delayBetween + 1000); // Longer pause when text is complete
          return;
        }
        
        setTimeout(type, typeSpeed);
      }
    }

    // Start typing after a short delay
    console.log('Starting typewriter effect...');
    setTimeout(() => {
      if (!isInitialized) {
        isInitialized = true;
        type();
      }
    }, 1000);
  });
</script>
