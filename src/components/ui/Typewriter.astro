---
export interface Props {
  texts: string[];
  typingSpeed?: number; 
  deletingSpeed?: number; 
  delayBetween?: number; 
  loop?: boolean; 
  class?: string;
}
const { texts, typingSpeed = 100, deletingSpeed = 50, delayBetween = 2000, loop = true, class: cls = 'typewriter' } = Astro.props;

// Generate unique ID for multiple instances
const uniqueId = `typewriter-${Math.random().toString(36).substr(2, 9)}`;
---
<p id={uniqueId} class={cls} data-texts={JSON.stringify(texts)} data-typing-speed={typingSpeed} data-deleting-speed={deletingSpeed} data-delay-between={delayBetween} data-loop={loop} aria-live="polite"></p>

<style>
  .typewriter {
    display: block;
    text-align: center;
    font-size: 1.2rem;
    line-height: 1.5;
    margin: var(--spacing-lg) 0;
    min-height: 2.4rem;
    color: white;
    width: 100%;
  }
</style>

<script define:vars={{ uniqueId }}>
  document.addEventListener('DOMContentLoaded', function() {
    const typewriterElement = document.getElementById(uniqueId);
    if (!typewriterElement) {
      console.error('Typewriter element not found:', uniqueId);
      return;
    }
    
    const texts = JSON.parse(typewriterElement.getAttribute('data-texts') || '[]');
    const typeSpeed = Number(typewriterElement.getAttribute('data-typing-speed') || 100);
    const deleteSpeed = Number(typewriterElement.getAttribute('data-deleting-speed') || 50);
    const delayBetween = Number(typewriterElement.getAttribute('data-delay-between') || 2000);
    const loop = (typewriterElement.getAttribute('data-loop') === 'true');
    
    if (texts.length === 0) {
      console.error('No texts provided for typewriter');
      return;
    }

    let textIndex = 0;
    let charIndex = 0;
    let isDeleting = false;

    function typeWriter() {
      const currentText = texts[textIndex];
      if (!currentText || !typewriterElement) return;

      if (!isDeleting) {
        // Typing
        typewriterElement.textContent = currentText.slice(0, charIndex + 1);
        charIndex++;

        if (charIndex === currentText.length) {
          setTimeout(() => {
            isDeleting = true;
          }, delayBetween);
          return;
        }
      } else {
        // Deleting
        typewriterElement.textContent = currentText.slice(0, charIndex - 1);
        charIndex--;

        if (charIndex === 0) {
          isDeleting = false;
          textIndex = (textIndex + 1) % texts.length;
          
          if (!loop && textIndex === 0) {
            return; // Stop if not looping
          }
        }
      }

      const typingSpeed = isDeleting ? deleteSpeed : typeSpeed;
      setTimeout(typeWriter, typingSpeed);
    }

    // Start typing after initial delay
    setTimeout(() => {
      typeWriter();
    }, 1200);
  });
</script>
